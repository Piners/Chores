'use strict';

// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'

angular.module('chore', ['ionic', 'satellizer']).config(function ($stateProvider, $authProvider) {
  $stateProvider.state('addChild', {
    url: "/addChild",
    templateUrl: "./templates/addChild.html",
    controller: "addChildCtrl"

  }).state('assignChore', {
    url: "/assignChore",
    templateUrl: "./templates/assignChore.html",
    controller: "assignChoreCtrl"

  }).state('editChild', {
    url: "/editChild/:id",
    templateUrl: "./templates/editChild.html",
    controller: "editChildCtrl"
  }).state('history', {
    url: "/history",
    templateUrl: "./templates/history.html",
    controller: "historyCtrl"
  }).state('home', {
    url: "/home",
    templateUrl: "./templates/home.html",
    controller: "homeCtrl"
  }).state('login', {
    url: "/login",
    templateUrl: "./templates/Login.html",
    controller: "loginCtrl"
  }).state('makeChore', {
    url: "/makeChore",
    templateUrl: "./templates/makeChore.html",
    controller: "makeChoreCtrl"

  }).state('setRewards', {
    url: "/setRewards/:id",
    templateUrl: "./templates/setRewards.html",
    controller: "setRewardsCtrl"

  }).state('settings', {
    url: "/settings",
    templateUrl: "./templates/settings.html",
    controller: "settingsCtrl"
  }).state('tracker', {
    url: "/tracker/:id",
    templateUrl: "./templates/tracker.html",
    controller: "trackerCtrl"
  }).state('userInfo', {
    url: "/userInfo",
    templateUrl: "./templates/userInfo.html",
    controller: "userInfoCtrl"
  }).state('childBank', {
    url: "/child/bank",
    templateUrl: "./templates/childBank.html",
    controller: "childBankCtrl"
  }).state('childHome', {
    url: "/child/home",
    templateUrl: "./templates/childHome.html",
    controller: "childHomeCtrl"
  }).state('childLogin', {
    url: "/child/login",
    templateUrl: "./templates/childLogin.html",
    controller: "childLoginCtrl"
  }).state('childSettings', {
    url: "/child/settings",
    templateUrl: "./templates/childSettings.html",
    controller: "childSettingsCtrl"
  });

  // Optional: For client-side use (Implicit Grant), set responseType to 'token' (default: 'code')
  $authProvider.facebook({
    clientId: '332272057132681',
    responseType: 'token'
  });

  $authProvider.google({
    clientId: '275352960946-5rcan3qkhlsc7m50hev5dn2e2cae9mbp.apps.googleusercontent.com',
    url: 'http://localhost:8100/#/login/'
  });
}).run(function ($ionicPlatform) {
  $ionicPlatform.ready(function () {
    if (window.cordova && window.cordova.plugins.Keyboard) {
      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
      // for form inputs)
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

      // Don't remove this line unless you know what you are doing. It stops the viewport
      // from snapping when text inputs are focused. Ionic handles this internally for
      // a much nicer keyboard experience.
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if (window.StatusBar) {
      StatusBar.styleDefault();
    }
  });
});
"use strict";

angular.module('chore').controller("addChildCtrl", function ($scope) {

  //backbutton
  $scope.goback = function () {
    window.history.go(-1);
  };
});
"use strict";

angular.module('chore').controller("assignChoreCtrl", function ($scope) {
   $scope.test = "Message from assign chore controller";

});
"use strict";

angular.module('chore').controller("childBankCtrl", function ($scope) {
   $scope.test = "Message from bank controller";
});
"use strict";

angular.module('chore').controller("childHomeCtrl", function ($scope) {
   $scope.test = "Message from  child Home controller";
});
"use strict";

angular.module('chore').controller("childLoginCtrl", function ($scope) {
   $scope.test = "Message from child Login controller";
});
"use strict";

angular.module('chore').controller("childSettingsCtrl", function ($scope) {
   $scope.test = "Message from child settings controller";
});
"use strict";

angular.module('chore').controller("editChildCtrl", function ($scope) {

  $scope.goback = function () {
    window.history.go(-1);
  };

});
"use strict";

angular.module('chore').controller("historyCtrl", function ($scope) {
   $scope.test = "Message from History controller";
});
"use strict";

angular.module('chore').controller("homeCtrl", function ($scope, $ionicModal) {
  $scope.test = "Message from Home controller";
  $ionicModal.fromTemplateUrl('bannerModal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function () {
    $scope.modal.show();
  };
  $scope.closeModal = function () {
    $scope.modal.hide();
  };
  // Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function () {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function () {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function () {
    // Execute action
  });
});
"use strict";




angular.module('chore').controller("loginCtrl", function ($scope, $auth) {

  $scope.authenticate = function (provider) {
    $auth.authenticate(provider);
    // $scope.test = "Hello from login controller"
    $scope.revealer = function () {
      $scope.hide = !$scope.hide;
    };
  };
});
"use strict";

angular.module('chore').controller("makeChoreCtrl", function ($scope) {
  $scope.goback = function () {
    window.history.go(-1);
  };
});
'use strict';

angular.module('chore').controller("setRewardsCtrl", function ($scope, $ionicModal) {
  $ionicModal.fromTemplateUrl('rewardModal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function () {
    $scope.modal.show();
  };
  $scope.closeModal = function () {
    $scope.modal.hide();
  };
  // Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function () {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function () {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function () {
    // Execute action
  });
});
'use strict';

angular.module('chore').controller("settingsCtrl", function ($scope, $ionicModal) {
  $ionicModal.fromTemplateUrl('changePassword.html', {
    id: '1', // We need to use and ID to identify the modal that is firing the event!
    scope: $scope,
    backdropClickToClose: false,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.oModal1 = modal;
  });

  // Modal 2
  $ionicModal.fromTemplateUrl('changeHousehold.html', {
    id: '2', // We need to use and ID to identify the modal that is firing the event!
    scope: $scope,
    backdropClickToClose: false,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.oModal2 = modal;
  });

  $ionicModal.fromTemplateUrl('changeZip.html', {
    id: '3', // We need to use and ID to identify the modal that is firing the event!
    scope: $scope,
    backdropClickToClose: false,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.oModal3 = modal;
  });

  $ionicModal.fromTemplateUrl('addParent.html', {
    id: '4', // We need to use and ID to identify the modal that is firing the event!
    scope: $scope,
    backdropClickToClose: false,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.oModal4 = modal;
  });

  $ionicModal.fromTemplateUrl('removeChild.html', {
    id: '5', // We need to use and ID to identify the modal that is firing the event!
    scope: $scope,
    backdropClickToClose: false,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.oModal5 = modal;
  });

  $scope.openModal = function (index) {
    if (index == 1) $scope.oModal1.show();else if (index == 2) $scope.oModal2.show();else if (index == 3) $scope.oModal3.show();else if (index == 4) $scope.oModal4.show();else $scope.oModal5.show();
  };

  $scope.closeModal = function (index) {
    if (index == 1) $scope.oModal1.hide();else if (index == 2) $scope.oModal2.hide();else if (index == 3) $scope.oModal3.hide();else if (index == 4) $scope.oModal4.hide();else $scope.oModal5.hide();
  };

  $scope.$on('$destroy', function () {
    $scope.oModal1.remove();
    $scope.oModal2.remove();
    $scope.oModal3.remove();
    $scope.oModal4.remove();
    $scope.oModal5.remove();
  });
});
'use strict';

angular.module('chore').controller("trackerCtrl", function ($scope, $ionicModal) {
  $ionicModal.fromTemplateUrl('picConfModal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function (modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function () {
    $scope.modal.show();
  };
  $scope.closeModal = function () {
    $scope.modal.hide();
  };
  // Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function () {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function () {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function () {
    // Execute action
  });
});
"use strict";

angular.module('chore').controller("userInfoCtrl", function ($scope) {
   $scope.test = "Message from info controller";
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2FkZENoaWxkQ3RybC5qcyIsImNvbnRyb2xsZXJzL2Fzc2lnbkNob3JlQ3RybC5qcyIsImNvbnRyb2xsZXJzL2NoaWxkQmFua0N0cmwuanMiLCJjb250cm9sbGVycy9jaGlsZEhvbWVDdHJsLmpzIiwiY29udHJvbGxlcnMvY2hpbGRMb2dpbkN0cmwuanMiLCJjb250cm9sbGVycy9jaGlsZFNldHRpbmdzQ3RybC5qcyIsImNvbnRyb2xsZXJzL2VkaXRDaGlsZEN0cmwuanMiLCJjb250cm9sbGVycy9oaXN0b3J5Q3RybC5qcyIsImNvbnRyb2xsZXJzL2hvbWVDdHJsLmpzIiwiY29udHJvbGxlcnMvbG9naW5DdHJsLmpzIiwiY29udHJvbGxlcnMvbWFrZUNob3JlQ3RybC5qcyIsImNvbnRyb2xsZXJzL3NldFJld2FyZHNDdHJsLmpzIiwiY29udHJvbGxlcnMvc2V0dGluZ3NDdHJsLmpzIiwiY29udHJvbGxlcnMvdHJhY2tlckN0cmwuanMiLCJjb250cm9sbGVycy91c2VySW5mb0N0cmwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJydW4iLCIkaW9uaWNQbGF0Zm9ybSIsInJlYWR5Iiwid2luZG93IiwiY29yZG92YSIsInBsdWdpbnMiLCJLZXlib2FyZCIsImhpZGVLZXlib2FyZEFjY2Vzc29yeUJhciIsImRpc2FibGVTY3JvbGwiLCJTdGF0dXNCYXIiLCJzdHlsZURlZmF1bHQiLCIkc2NvcGUiLCJnb2JhY2siLCJoaXN0b3J5IiwiZ28iLCJ0ZXN0IiwiJGlvbmljTW9kYWwiLCJmcm9tVGVtcGxhdGVVcmwiLCJzY29wZSIsImFuaW1hdGlvbiIsInRoZW4iLCJtb2RhbCIsIm9wZW5Nb2RhbCIsInNob3ciLCJjbG9zZU1vZGFsIiwiaGlkZSIsIiRvbiIsInJlbW92ZSIsInJldmVhbGVyIiwiaWQiLCJiYWNrZHJvcENsaWNrVG9DbG9zZSIsIm9Nb2RhbDEiLCJvTW9kYWwyIiwib01vZGFsMyIsIm9Nb2RhbDQiLCJvTW9kYWw1IiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0FBLFFBQVFDLE1BQVIsQ0FBZSxPQUFmLEVBQXdCLENBQUMsT0FBRCxDQUF4QixFQUNDQyxNQURELENBQ1EsVUFBU0MsY0FBVCxFQUF3QjtBQUM5QkEsaUJBQ0NDLEtBREQsQ0FDTyxVQURQLEVBQ2tCO0FBQ2hCQyxTQUFJLFdBRFk7QUFFaEJDLGlCQUFhLDJCQUZHO0FBR2hCQyxnQkFBWTtBQUhJLEdBRGxCLEVBTUNILEtBTkQsQ0FNTyxhQU5QLEVBTXFCO0FBQ25CQyxTQUFJLGNBRGU7QUFFbkJDLGlCQUFhLDhCQUZNO0FBR25CQyxnQkFBWTtBQUhPLEdBTnJCLEVBV0NILEtBWEQsQ0FXTyxXQVhQLEVBV21CO0FBQ2pCQyxTQUFJLGdCQURhO0FBRWpCQyxpQkFBYSw0QkFGSTtBQUdqQkMsZ0JBQVk7QUFISyxHQVhuQixFQWdCQ0gsS0FoQkQsQ0FnQk8sU0FoQlAsRUFnQmlCO0FBQ2ZDLFNBQUksVUFEVztBQUVmQyxpQkFBYSwwQkFGRTtBQUdmQyxnQkFBWTtBQUhHLEdBaEJqQixFQXFCQ0gsS0FyQkQsQ0FxQk8sTUFyQlAsRUFxQmM7QUFDWkMsU0FBSSxPQURRO0FBRVpDLGlCQUFhLHVCQUZEO0FBR1pDLGdCQUFZO0FBSEEsR0FyQmQsRUEwQkNILEtBMUJELENBMEJPLE9BMUJQLEVBMEJlO0FBQ2JDLFNBQUksUUFEUztBQUViQyxpQkFBYSx3QkFGQTtBQUdiQyxnQkFBWTtBQUhDLEdBMUJmLEVBK0JDSCxLQS9CRCxDQStCTyxXQS9CUCxFQStCbUI7QUFDakJDLFNBQUksWUFEYTtBQUVqQkMsaUJBQWEsNEJBRkk7QUFHakJDLGdCQUFZO0FBSEssR0EvQm5CLEVBb0NDSCxLQXBDRCxDQW9DTyxZQXBDUCxFQW9Db0I7QUFDbEJDLFNBQUksaUJBRGM7QUFFbEJDLGlCQUFhLDZCQUZL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c0NvbnRlbnQiOlsiLy8gSW9uaWMgU3RhcnRlciBBcHBcclxuXHJcbi8vIGFuZ3VsYXIubW9kdWxlIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmcgYW5kIHJldHJpZXZpbmcgQW5ndWxhciBtb2R1bGVzXHJcbi8vICdzdGFydGVyJyBpcyB0aGUgbmFtZSBvZiB0aGlzIGFuZ3VsYXIgbW9kdWxlIGV4YW1wbGUgKGFsc28gc2V0IGluIGEgPGJvZHk+IGF0dHJpYnV0ZSBpbiBpbmRleC5odG1sKVxyXG4vLyB0aGUgMm5kIHBhcmFtZXRlciBpcyBhbiBhcnJheSBvZiAncmVxdWlyZXMnXHJcbmFuZ3VsYXIubW9kdWxlKCdjaG9yZScsIFsnaW9uaWMnXSlcclxuLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XHJcbiAgJHN0YXRlUHJvdmlkZXJcclxuICAuc3RhdGUoJ2FkZENoaWxkJyx7XHJcbiAgICB1cmw6XCIvYWRkQ2hpbGRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL2FkZENoaWxkLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiYWRkQ2hpbGRDdHJsXCJcclxuICB9KVxyXG4gIC5zdGF0ZSgnYXNzaWduQ2hvcmUnLHtcclxuICAgIHVybDpcIi9hc3NpZ25DaG9yZVwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvYXNzaWduQ2hvcmUuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJhc3NpZ25DaG9yZUN0cmxcIlxyXG4gIH0pXHJcbiAgLnN0YXRlKCdlZGl0Q2hpbGQnLHtcclxuICAgIHVybDpcIi9lZGl0Q2hpbGQvOmlkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3RlbXBsYXRlcy9lZGl0Q2hpbGQuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJlZGl0Q2hpbGRDdHJsXCJcclxuICB9KVxyXG4gIC5zdGF0ZSgnaGlzdG9yeScse1xyXG4gICAgdXJsOlwiL2hpc3RvcnlcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL2hpc3RvcnkuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJoaXN0b3J5Q3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ2hvbWUnLHtcclxuICAgIHVybDpcIi9ob21lXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3RlbXBsYXRlcy9ob21lLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiaG9tZUN0cmxcIlxyXG4gIH0pXHJcbiAgLnN0YXRlKCdsb2dpbicse1xyXG4gICAgdXJsOlwiL2xvZ2luXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3RlbXBsYXRlcy9Mb2dpbi5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImxvZ2luQ3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ21ha2VDaG9yZScse1xyXG4gICAgdXJsOlwiL21ha2VDaG9yZVwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvbWFrZUNob3JlLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwibWFrZUNob3JlQ3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ3NldFJld2FyZHMnLHtcclxuICAgIHVybDpcIi9zZXRSZXdhcmRzLzppZFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvc2V0UmV3YXJkcy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcInNldFJld2FyZHNDdHJsXCJcclxuICB9KVxyXG4gIC5zdGF0ZSgnc2V0dGluZ3MnLHtcclxuICAgIHVybDpcIi9zZXR0aW5nc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvc2V0dGluZ3MuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJzZXR0aW5nc0N0cmxcIlxyXG4gIH0pXHJcbiAgLnN0YXRlKCd0cmFja2VyJyx7XHJcbiAgICB1cmw6XCIvdHJhY2tlci86aWRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL3RyYWNrZXIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJ0cmFja2VyQ3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ3VzZXJJbmZvJyx7XHJcbiAgICB1cmw6XCIvdXNlckluZm9cIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL3VzZXJJbmZvLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwidXNlckluZm9DdHJsXCJcclxuICB9KVxyXG4gIC5zdGF0ZSgnY2hpbGRCYW5rJyx7XHJcbiAgICB1cmw6XCIvY2hpbGQvYmFua1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvY2hpbGRCYW5rLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiY2hpbGRCYW5rQ3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ2NoaWxkSG9tZScse1xyXG4gICAgdXJsOlwiL2NoaWxkL2hvbWVcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL2NoaWxkSG9tZS5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImNoaWxkSG9tZUN0cmxcIlxyXG4gIH0pXHJcbiAgLnN0YXRlKCdjaGlsZExvZ2luJyx7XHJcbiAgICB1cmw6XCIvY2hpbGQvbG9naW5cIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vdGVtcGxhdGVzL2NoaWxkTG9naW4uaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJjaGlsZExvZ2luQ3RybFwiXHJcbiAgfSlcclxuICAuc3RhdGUoJ2NoaWxkU2V0dGluZ3MnLHtcclxuICAgIHVybDpcIi9jaGlsZC9zZXR0aW5nc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi90ZW1wbGF0ZXMvY2hpbGRTZXR0aW5ncy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImNoaWxkU2V0dGluZ3NDdHJsXCJcclxuICB9KVxyXG59KVxyXG5cclxuLnJ1bihmdW5jdGlvbigkaW9uaWNQbGF0Zm9ybSkge1xyXG4gICRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgaWYod2luZG93LmNvcmRvdmEgJiYgd2luZG93LmNvcmRvdmEucGx1Z2lucy5LZXlib2FyZCkge1xyXG4gICAgICAvLyBIaWRlIHRoZSBhY2Nlc3NvcnkgYmFyIGJ5IGRlZmF1bHQgKHJlbW92ZSB0aGlzIHRvIHNob3cgdGhlIGFjY2Vzc29yeSBiYXIgYWJvdmUgdGhlIGtleWJvYXJkXHJcbiAgICAgIC8vIGZvciBmb3JtIGlucHV0cylcclxuICAgICAgY29yZG92YS5wbHVnaW5zLktleWJvYXJkLmhpZGVLZXlib2FyZEFjY2Vzc29yeUJhcih0cnVlKTtcclxuXHJcbiAgICAgIC8vIERvbid0IHJlbW92ZSB0aGlzIGxpbmUgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy4gSXQgc3RvcHMgdGhlIHZpZXdwb3J0XHJcbiAgICAgIC8vIGZyb20gc25hcHBpbmcgd2hlbiB0ZXh0IGlucHV0cyBhcmUgZm9jdXNlZC4gSW9uaWMgaGFuZGxlcyB0aGlzIGludGVybmFsbHkgZm9yXHJcbiAgICAgIC8vIGEgbXVjaCBuaWNlciBrZXlib2FyZCBleHBlcmllbmNlLlxyXG4gICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuZGlzYWJsZVNjcm9sbCh0cnVlKTtcclxuICAgIH1cclxuICAgIGlmKHdpbmRvdy5TdGF0dXNCYXIpIHtcclxuICAgICAgU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hvcmUnKS5jb250cm9sbGVyKFwiYWRkQ2hpbGRDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgLy9iYWNrYnV0dG9uXHJcbiAgJHNjb3BlLmdvYmFjayA9IGZ1bmN0aW9uKCl7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5nbygtMSlcclxuICB9XHJcblxyXG59KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hvcmUnKS5jb250cm9sbGVyKFwiYXNzaWduQ2hvcmVDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICRzY29wZS50ZXN0ID0gXCJNZXNzYWdlIGZyb20gYXNzaWduIGNob3JlIGNvbnRyb2xsZXJcIlxyXG5cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Nob3JlJykuY29udHJvbGxlcihcImNoaWxkQmFua0N0cmxcIiwgZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgJHNjb3BlLnRlc3QgPSBcIk1lc3NhZ2UgZnJvbSBiYW5rIGNvbnRyb2xsZXJcIlxyXG5cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Nob3JlJykuY29udHJvbGxlcihcImNoaWxkSG9tZUN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgJHNjb3BlLnRlc3QgPSBcIk1lc3NhZ2UgZnJvbSAgY2hpbGQgSG9tZSBjb250cm9sbGVyXCJcclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJjaGlsZExvZ2luQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAkc2NvcGUudGVzdCA9IFwiTWVzc2FnZSBmcm9tIGNoaWxkIExvZ2luIGNvbnRyb2xsZXJcIlxyXG5cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Nob3JlJykuY29udHJvbGxlcihcImNoaWxkU2V0dGluZ3NDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICRzY29wZS50ZXN0ID0gXCJNZXNzYWdlIGZyb20gY2hpbGQgc2V0dGluZ3MgY29udHJvbGxlclwiXHJcblxyXG59KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hvcmUnKS5jb250cm9sbGVyKFwiZWRpdENoaWxkQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUpe1xyXG4gICRzY29wZS5nb2JhY2sgPSBmdW5jdGlvbigpe1xyXG4gICAgd2luZG93Lmhpc3RvcnkuZ28oLTEpXHJcbiAgfVxyXG5cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Nob3JlJykuY29udHJvbGxlcihcImhpc3RvcnlDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgICRzY29wZS50ZXN0ID0gXCJNZXNzYWdlIGZyb20gSGlzdG9yeSBjb250cm9sbGVyXCJcclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJob21lQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUsICRpb25pY01vZGFsKXtcclxuICAgJHNjb3BlLnRlc3QgPSBcIk1lc3NhZ2UgZnJvbSBIb21lIGNvbnRyb2xsZXJcIlxyXG4gICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ2Jhbm5lck1vZGFsLmh0bWwnLCB7XHJcbiAgICAgc2NvcGU6ICRzY29wZSxcclxuICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcclxuICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xyXG4gICAgICRzY29wZS5tb2RhbCA9IG1vZGFsO1xyXG4gICB9KTtcclxuICAgJHNjb3BlLm9wZW5Nb2RhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICRzY29wZS5tb2RhbC5zaG93KCk7XHJcbiAgIH07XHJcbiAgICRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgJHNjb3BlLm1vZGFsLmhpZGUoKTtcclxuICAgfTtcclxuICAgLy8gQ2xlYW51cCB0aGUgbW9kYWwgd2hlbiB3ZSdyZSBkb25lIHdpdGggaXQhXHJcbiAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgJHNjb3BlLm1vZGFsLnJlbW92ZSgpO1xyXG4gICB9KTtcclxuICAgLy8gRXhlY3V0ZSBhY3Rpb24gb24gaGlkZSBtb2RhbFxyXG4gICAkc2NvcGUuJG9uKCdtb2RhbC5oaWRkZW4nLCBmdW5jdGlvbigpIHtcclxuICAgICAvLyBFeGVjdXRlIGFjdGlvblxyXG4gICB9KTtcclxuICAgLy8gRXhlY3V0ZSBhY3Rpb24gb24gcmVtb3ZlIG1vZGFsXHJcbiAgICRzY29wZS4kb24oJ21vZGFsLnJlbW92ZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAvLyBFeGVjdXRlIGFjdGlvblxyXG4gICB9KTtcclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJsb2dpbkN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlKXtcclxuICAvLyAkc2NvcGUudGVzdCA9IFwiSGVsbG8gZnJvbSBsb2dpbiBjb250cm9sbGVyXCJcclxuICAkc2NvcGUucmV2ZWFsZXIgPSBmdW5jdGlvbigpe1xyXG4gICRzY29wZS5oaWRlID0gISRzY29wZS5oaWRlO1xyXG5cclxuIH1cclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJtYWtlQ2hvcmVDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSl7XHJcbiAgJHNjb3BlLmdvYmFjayA9IGZ1bmN0aW9uKCl7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5nbygtMSlcclxuICB9XHJcblxyXG59KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hvcmUnKS5jb250cm9sbGVyKFwic2V0UmV3YXJkc0N0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkaW9uaWNNb2RhbCl7XHJcbiAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdyZXdhcmRNb2RhbC5odG1sJywge1xyXG4gICAgc2NvcGU6ICRzY29wZSxcclxuICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xyXG4gIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICRzY29wZS5tb2RhbCA9IG1vZGFsO1xyXG4gIH0pO1xyXG4gICRzY29wZS5vcGVuTW9kYWwgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5tb2RhbC5zaG93KCk7XHJcbiAgfTtcclxuICAkc2NvcGUuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLm1vZGFsLmhpZGUoKTtcclxuICB9O1xyXG4gIC8vIENsZWFudXAgdGhlIG1vZGFsIHdoZW4gd2UncmUgZG9uZSB3aXRoIGl0IVxyXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUubW9kYWwucmVtb3ZlKCk7XHJcbiAgfSk7XHJcbiAgLy8gRXhlY3V0ZSBhY3Rpb24gb24gaGlkZSBtb2RhbFxyXG4gICRzY29wZS4kb24oJ21vZGFsLmhpZGRlbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gRXhlY3V0ZSBhY3Rpb25cclxuICB9KTtcclxuICAvLyBFeGVjdXRlIGFjdGlvbiBvbiByZW1vdmUgbW9kYWxcclxuICAkc2NvcGUuJG9uKCdtb2RhbC5yZW1vdmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBFeGVjdXRlIGFjdGlvblxyXG4gIH0pO1xyXG5cclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJzZXR0aW5nc0N0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkaW9uaWNNb2RhbCl7XHJcbiAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjaGFuZ2VQYXNzd29yZC5odG1sJywge1xyXG4gICAgIGlkOiAnMScsIC8vIFdlIG5lZWQgdG8gdXNlIGFuZCBJRCB0byBpZGVudGlmeSB0aGUgbW9kYWwgdGhhdCBpcyBmaXJpbmcgdGhlIGV2ZW50IVxyXG4gICAgIHNjb3BlOiAkc2NvcGUsXHJcbiAgICAgYmFja2Ryb3BDbGlja1RvQ2xvc2U6IGZhbHNlLFxyXG4gICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xyXG4gICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XHJcbiAgICAgJHNjb3BlLm9Nb2RhbDEgPSBtb2RhbDtcclxuICAgfSk7XHJcblxyXG4gICAvLyBNb2RhbCAyXHJcbiAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY2hhbmdlSG91c2Vob2xkLmh0bWwnLCB7XHJcbiAgICAgaWQ6ICcyJywgLy8gV2UgbmVlZCB0byB1c2UgYW5kIElEIHRvIGlkZW50aWZ5IHRoZSBtb2RhbCB0aGF0IGlzIGZpcmluZyB0aGUgZXZlbnQhXHJcbiAgICAgc2NvcGU6ICRzY29wZSxcclxuICAgICBiYWNrZHJvcENsaWNrVG9DbG9zZTogZmFsc2UsXHJcbiAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXHJcbiAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICAkc2NvcGUub01vZGFsMiA9IG1vZGFsO1xyXG4gICB9KTtcclxuXHJcbiAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY2hhbmdlWmlwLmh0bWwnLCB7XHJcbiAgICAgaWQ6ICczJywgLy8gV2UgbmVlZCB0byB1c2UgYW5kIElEIHRvIGlkZW50aWZ5IHRoZSBtb2RhbCB0aGF0IGlzIGZpcmluZyB0aGUgZXZlbnQhXHJcbiAgICAgc2NvcGU6ICRzY29wZSxcclxuICAgICBiYWNrZHJvcENsaWNrVG9DbG9zZTogZmFsc2UsXHJcbiAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXHJcbiAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICAkc2NvcGUub01vZGFsMyA9IG1vZGFsO1xyXG4gICB9KTtcclxuXHJcbiAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnYWRkUGFyZW50Lmh0bWwnLCB7XHJcbiAgICAgaWQ6ICc0JywgLy8gV2UgbmVlZCB0byB1c2UgYW5kIElEIHRvIGlkZW50aWZ5IHRoZSBtb2RhbCB0aGF0IGlzIGZpcmluZyB0aGUgZXZlbnQhXHJcbiAgICAgc2NvcGU6ICRzY29wZSxcclxuICAgICBiYWNrZHJvcENsaWNrVG9DbG9zZTogZmFsc2UsXHJcbiAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXHJcbiAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICAkc2NvcGUub01vZGFsNCA9IG1vZGFsO1xyXG4gICB9KTtcclxuXHJcbiAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgncmVtb3ZlQ2hpbGQuaHRtbCcsIHtcclxuICAgICBpZDogJzUnLCAvLyBXZSBuZWVkIHRvIHVzZSBhbmQgSUQgdG8gaWRlbnRpZnkgdGhlIG1vZGFsIHRoYXQgaXMgZmlyaW5nIHRoZSBldmVudCFcclxuICAgICBzY29wZTogJHNjb3BlLFxyXG4gICAgIGJhY2tkcm9wQ2xpY2tUb0Nsb3NlOiBmYWxzZSxcclxuICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcclxuICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xyXG4gICAgICRzY29wZS5vTW9kYWw1ID0gbW9kYWw7XHJcbiAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAkc2NvcGUub3Blbk1vZGFsID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICBpZiAoaW5kZXggPT0gMSkgJHNjb3BlLm9Nb2RhbDEuc2hvdygpO1xyXG4gICAgIGVsc2UgaWYoaW5kZXggPT0gMikgJHNjb3BlLm9Nb2RhbDIuc2hvdygpO1xyXG4gICAgIGVsc2UgaWYoaW5kZXggPT0gMykgJHNjb3BlLm9Nb2RhbDMuc2hvdygpO1xyXG4gICAgIGVsc2UgaWYoaW5kZXggPT0gNCkgJHNjb3BlLm9Nb2RhbDQuc2hvdygpO1xyXG4gICAgIGVsc2UgJHNjb3BlLm9Nb2RhbDUuc2hvdygpO1xyXG4gICB9O1xyXG5cclxuICAgJHNjb3BlLmNsb3NlTW9kYWwgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgIGlmIChpbmRleCA9PSAxKSAkc2NvcGUub01vZGFsMS5oaWRlKCk7XHJcbiAgICAgZWxzZSBpZihpbmRleCA9PSAyKSAkc2NvcGUub01vZGFsMi5oaWRlKCk7XHJcbiAgICAgZWxzZSBpZihpbmRleCA9PSAzKSAkc2NvcGUub01vZGFsMy5oaWRlKCk7XHJcbiAgICAgZWxzZSBpZihpbmRleCA9PSA0KSAkc2NvcGUub01vZGFsNC5oaWRlKCk7XHJcbiAgICAgZWxzZSAkc2NvcGUub01vZGFsNS5oaWRlKCk7XHJcbiAgIH07XHJcblxyXG4gICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICRzY29wZS5vTW9kYWwxLnJlbW92ZSgpO1xyXG4gICAgICRzY29wZS5vTW9kYWwyLnJlbW92ZSgpO1xyXG4gICAgICRzY29wZS5vTW9kYWwzLnJlbW92ZSgpO1xyXG4gICAgICRzY29wZS5vTW9kYWw0LnJlbW92ZSgpO1xyXG4gICAgICRzY29wZS5vTW9kYWw1LnJlbW92ZSgpO1xyXG4gICB9KTtcclxuXHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdjaG9yZScpLmNvbnRyb2xsZXIoXCJ0cmFja2VyQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUsICRpb25pY01vZGFsKXtcclxuICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ3BpY0NvbmZNb2RhbC5odG1sJywge1xyXG4gICAgc2NvcGU6ICRzY29wZSxcclxuICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xyXG4gIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICRzY29wZS5tb2RhbCA9IG1vZGFsO1xyXG4gIH0pO1xyXG4gICRzY29wZS5vcGVuTW9kYWwgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5tb2RhbC5zaG93KCk7XHJcbiAgfTtcclxuICAkc2NvcGUuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLm1vZGFsLmhpZGUoKTtcclxuICB9O1xyXG4gIC8vIENsZWFudXAgdGhlIG1vZGFsIHdoZW4gd2UncmUgZG9uZSB3aXRoIGl0IVxyXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUubW9kYWwucmVtb3ZlKCk7XHJcbiAgfSk7XHJcbiAgLy8gRXhlY3V0ZSBhY3Rpb24gb24gaGlkZSBtb2RhbFxyXG4gICRzY29wZS4kb24oJ21vZGFsLmhpZGRlbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gRXhlY3V0ZSBhY3Rpb25cclxuICB9KTtcclxuICAvLyBFeGVjdXRlIGFjdGlvbiBvbiByZW1vdmUgbW9kYWxcclxuICAkc2NvcGUuJG9uKCdtb2RhbC5yZW1vdmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBFeGVjdXRlIGFjdGlvblxyXG4gIH0pO1xyXG5cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Nob3JlJykuY29udHJvbGxlcihcInVzZXJJbmZvQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUpe1xyXG4gICAkc2NvcGUudGVzdCA9IFwiTWVzc2FnZSBmcm9tIGluZm8gY29udHJvbGxlclwiXHJcblxyXG59KVxyXG4iXX0=


angular.module('chore').controller("setAwardsCtrl", function ($scope) {
   $scope.test = "Message from set Award controller";
});
"use strict";

angular.module('chore').controller("settingsCtrl", function ($scope) {
   $scope.test = "Message from settings controller";
});
"use strict";

angular.module('chore').controller("trackerCtrl", function ($scope) {
   $scope.test = "Message from tracker controller";
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
